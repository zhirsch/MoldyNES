package com.zacharyhirsch.moldynes.emulator.cpu.logging;

import com.google.common.collect.ImmutableMap;
import com.zacharyhirsch.moldynes.emulator.NesCpuMemoryMap;
import com.zacharyhirsch.moldynes.emulator.cpu.NesCpu;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Map;

public final class NesCpuLogger {

  private static final Map<Byte, Decompiler> DECOMPILERS =
      ImmutableMap.<Byte, Decompiler>builder()
          .put((byte) 0x00, new ImmediateDecompiler("BRK"))
          .put((byte) 0x01, new IndirectXDecompiler("ORA"))
          .put((byte) 0x03, new IndirectXDecompiler("SLO", true))
          .put((byte) 0x04, new ZeropageDecompiler("NOP", true))
          .put((byte) 0x05, new ZeropageDecompiler("ORA"))
          .put((byte) 0x06, new ZeropageDecompiler("ASL"))
          .put((byte) 0x07, new ZeropageDecompiler("SLO", true))
          .put((byte) 0x08, new ImpliedDecompiler("PHP"))
          .put((byte) 0x09, new ImmediateDecompiler("ORA"))
          .put((byte) 0x0a, new AccumulatorDecompiler("ASL"))
          .put((byte) 0x0b, new ImmediateDecompiler("ANC", true))
          .put((byte) 0x0c, new AbsoluteDecompiler("NOP", true))
          .put((byte) 0x0d, new AbsoluteDecompiler("ORA"))
          .put((byte) 0x0e, new AbsoluteDecompiler("ASL"))
          .put((byte) 0x0f, new AbsoluteDecompiler("SLO", true))
          .put((byte) 0x10, new BranchDecompiler("BPL"))
          .put((byte) 0x11, new IndirectYDecompiler("ORA"))
          .put((byte) 0x13, new IndirectYDecompiler("SLO", true))
          .put((byte) 0x14, new ZeropageXDecompiler("NOP", true))
          .put((byte) 0x15, new ZeropageXDecompiler("ORA"))
          .put((byte) 0x16, new ZeropageXDecompiler("ASL"))
          .put((byte) 0x17, new ZeropageXDecompiler("SLO", true))
          .put((byte) 0x18, new ImpliedDecompiler("CLC"))
          .put((byte) 0x19, new AbsoluteYDecompiler("ORA"))
          .put((byte) 0x1a, new ImpliedDecompiler("NOP", true))
          .put((byte) 0x1b, new AbsoluteYDecompiler("SLO", true))
          .put((byte) 0x1c, new AbsoluteXDecompiler("NOP", true))
          .put((byte) 0x1d, new AbsoluteXDecompiler("ORA"))
          .put((byte) 0x1e, new AbsoluteXDecompiler("ASL"))
          .put((byte) 0x1f, new AbsoluteXDecompiler("SLO", true))
          .put((byte) 0x20, new JumpAbsoluteDecompiler("JSR"))
          .put((byte) 0x21, new IndirectXDecompiler("AND"))
          .put((byte) 0x23, new IndirectXDecompiler("RLA", true))
          .put((byte) 0x24, new ZeropageDecompiler("BIT"))
          .put((byte) 0x25, new ZeropageDecompiler("AND"))
          .put((byte) 0x26, new ZeropageDecompiler("ROL"))
          .put((byte) 0x27, new ZeropageDecompiler("RLA", true))
          .put((byte) 0x28, new ImpliedDecompiler("PLP"))
          .put((byte) 0x29, new ImmediateDecompiler("AND"))
          .put((byte) 0x2a, new AccumulatorDecompiler("ROL"))
          .put((byte) 0x2b, new ImmediateDecompiler("ANC", true))
          .put((byte) 0x2c, new AbsoluteDecompiler("BIT"))
          .put((byte) 0x2d, new AbsoluteDecompiler("AND"))
          .put((byte) 0x2e, new AbsoluteDecompiler("ROL"))
          .put((byte) 0x2f, new AbsoluteDecompiler("RLA", true))
          .put((byte) 0x30, new BranchDecompiler("BMI"))
          .put((byte) 0x31, new IndirectYDecompiler("AND"))
          .put((byte) 0x32, new ImpliedDecompiler("HLT", true))
          .put((byte) 0x33, new IndirectYDecompiler("RLA", true))
          .put((byte) 0x34, new ZeropageXDecompiler("NOP", true))
          .put((byte) 0x35, new ZeropageXDecompiler("AND"))
          .put((byte) 0x36, new ZeropageXDecompiler("ROL"))
          .put((byte) 0x37, new ZeropageXDecompiler("RLA", true))
          .put((byte) 0x38, new ImpliedDecompiler("SEC"))
          .put((byte) 0x39, new AbsoluteYDecompiler("AND"))
          .put((byte) 0x3a, new ImpliedDecompiler("NOP", true))
          .put((byte) 0x3b, new AbsoluteYDecompiler("RLA", true))
          .put((byte) 0x3c, new AbsoluteXDecompiler("NOP", true))
          .put((byte) 0x3d, new AbsoluteXDecompiler("AND"))
          .put((byte) 0x3e, new AbsoluteXDecompiler("ROL"))
          .put((byte) 0x3f, new AbsoluteXDecompiler("RLA", true))
          .put((byte) 0x40, new ImpliedDecompiler("RTI"))
          .put((byte) 0x41, new IndirectXDecompiler("EOR"))
          .put((byte) 0x43, new IndirectXDecompiler("SRE", true))
          .put((byte) 0x44, new ZeropageDecompiler("NOP", true))
          .put((byte) 0x45, new ZeropageDecompiler("EOR"))
          .put((byte) 0x46, new ZeropageDecompiler("LSR"))
          .put((byte) 0x47, new ZeropageDecompiler("SRE", true))
          .put((byte) 0x48, new ImpliedDecompiler("PHA"))
          .put((byte) 0x49, new ImmediateDecompiler("EOR"))
          .put((byte) 0x4a, new AccumulatorDecompiler("LSR"))
          .put((byte) 0x4b, new ImmediateDecompiler("ALR", true))
          .put((byte) 0x4c, new JumpAbsoluteDecompiler("JMP"))
          .put((byte) 0x4d, new AbsoluteDecompiler("EOR"))
          .put((byte) 0x4e, new AbsoluteDecompiler("LSR"))
          .put((byte) 0x4f, new AbsoluteDecompiler("SRE", true))
          .put((byte) 0x50, new BranchDecompiler("BVC"))
          .put((byte) 0x51, new IndirectYDecompiler("EOR"))
          .put((byte) 0x53, new IndirectYDecompiler("SRE", true))
          .put((byte) 0x54, new ZeropageXDecompiler("NOP", true))
          .put((byte) 0x55, new ZeropageXDecompiler("EOR"))
          .put((byte) 0x56, new ZeropageXDecompiler("LSR"))
          .put((byte) 0x57, new ZeropageXDecompiler("SRE", true))
          .put((byte) 0x58, new ImpliedDecompiler("CLI"))
          .put((byte) 0x59, new AbsoluteYDecompiler("EOR"))
          .put((byte) 0x5a, new ImpliedDecompiler("NOP", true))
          .put((byte) 0x5b, new AbsoluteYDecompiler("SRE", true))
          .put((byte) 0x5c, new AbsoluteXDecompiler("NOP", true))
          .put((byte) 0x5d, new AbsoluteXDecompiler("EOR"))
          .put((byte) 0x5e, new AbsoluteXDecompiler("LSR"))
          .put((byte) 0x5f, new AbsoluteXDecompiler("SRE", true))
          .put((byte) 0x60, new ImpliedDecompiler("RTS"))
          .put((byte) 0x61, new IndirectXDecompiler("ADC"))
          .put((byte) 0x63, new IndirectXDecompiler("RRA", true))
          .put((byte) 0x64, new ZeropageDecompiler("NOP", true))
          .put((byte) 0x65, new ZeropageDecompiler("ADC"))
          .put((byte) 0x66, new ZeropageDecompiler("ROR"))
          .put((byte) 0x67, new ZeropageDecompiler("RRA", true))
          .put((byte) 0x68, new ImpliedDecompiler("PLA"))
          .put((byte) 0x69, new ImmediateDecompiler("ADC"))
          .put((byte) 0x6a, new AccumulatorDecompiler("ROR"))
          .put((byte) 0x6b, new ImmediateDecompiler("ARR", true))
          .put((byte) 0x6c, new JumpIndirectDecompiler("JMP"))
          .put((byte) 0x6d, new AbsoluteDecompiler("ADC"))
          .put((byte) 0x6e, new AbsoluteDecompiler("ROR"))
          .put((byte) 0x6f, new AbsoluteDecompiler("RRA", true))
          .put((byte) 0x70, new BranchDecompiler("BVS"))
          .put((byte) 0x71, new IndirectYDecompiler("ADC"))
          .put((byte) 0x73, new IndirectYDecompiler("RRA", true))
          .put((byte) 0x74, new ZeropageXDecompiler("NOP", true))
          .put((byte) 0x75, new ZeropageXDecompiler("ADC"))
          .put((byte) 0x76, new ZeropageXDecompiler("ROR"))
          .put((byte) 0x77, new ZeropageXDecompiler("RRA", true))
          .put((byte) 0x78, new ImpliedDecompiler("SEI"))
          .put((byte) 0x79, new AbsoluteYDecompiler("ADC"))
          .put((byte) 0x7a, new ImpliedDecompiler("NOP", true))
          .put((byte) 0x7b, new AbsoluteYDecompiler("RRA", true))
          .put((byte) 0x7c, new AbsoluteXDecompiler("NOP", true))
          .put((byte) 0x7d, new AbsoluteXDecompiler("ADC"))
          .put((byte) 0x7e, new AbsoluteXDecompiler("ROR"))
          .put((byte) 0x7f, new AbsoluteXDecompiler("RRA", true))
          .put((byte) 0x80, new ImmediateDecompiler("NOP", true))
          .put((byte) 0x81, new IndirectXDecompiler("STA"))
          .put((byte) 0x82, new ImmediateDecompiler("NOP", true))
          .put((byte) 0x83, new IndirectXDecompiler("SAX", true))
          .put((byte) 0x84, new ZeropageDecompiler("STY"))
          .put((byte) 0x85, new ZeropageDecompiler("STA"))
          .put((byte) 0x86, new ZeropageDecompiler("STX"))
          .put((byte) 0x87, new ZeropageDecompiler("SAX", true))
          .put((byte) 0x88, new ImpliedDecompiler("DEY"))
          .put((byte) 0x89, new ImmediateDecompiler("NOP", true))
          .put((byte) 0x8a, new ImpliedDecompiler("TXA"))
          .put((byte) 0x8c, new AbsoluteDecompiler("STY"))
          .put((byte) 0x8d, new AbsoluteDecompiler("STA"))
          .put((byte) 0x8e, new AbsoluteDecompiler("STX"))
          .put((byte) 0x8f, new AbsoluteDecompiler("SAX", true))
          .put((byte) 0x90, new BranchDecompiler("BCC"))
          .put((byte) 0x91, new IndirectYDecompiler("STA"))
          .put((byte) 0x94, new ZeropageXDecompiler("STY"))
          .put((byte) 0x95, new ZeropageXDecompiler("STA"))
          .put((byte) 0x96, new ZeropageYDecompiler("STX"))
          .put((byte) 0x97, new ZeropageYDecompiler("SAX", true))
          .put((byte) 0x98, new ImpliedDecompiler("TYA"))
          .put((byte) 0x99, new AbsoluteYDecompiler("STA"))
          .put((byte) 0x9a, new ImpliedDecompiler("TXS"))
          .put((byte) 0x9c, new AbsoluteXDecompiler("SYA"))
          .put((byte) 0x9d, new AbsoluteXDecompiler("STA"))
          .put((byte) 0x9e, new AbsoluteYDecompiler("SXA"))
          .put((byte) 0xa0, new ImmediateDecompiler("LDY"))
          .put((byte) 0xa1, new IndirectXDecompiler("LDA"))
          .put((byte) 0xa2, new ImmediateDecompiler("LDX"))
          .put((byte) 0xa3, new IndirectXDecompiler("LAX", true))
          .put((byte) 0xa4, new ZeropageDecompiler("LDY"))
          .put((byte) 0xa5, new ZeropageDecompiler("LDA"))
          .put((byte) 0xa6, new ZeropageDecompiler("LDX"))
          .put((byte) 0xa7, new ZeropageDecompiler("LAX", true))
          .put((byte) 0xa8, new ImpliedDecompiler("TAY"))
          .put((byte) 0xa9, new ImmediateDecompiler("LDA"))
          .put((byte) 0xaa, new ImpliedDecompiler("TAX"))
          .put((byte) 0xab, new ImmediateDecompiler("ATX", true))
          .put((byte) 0xac, new AbsoluteDecompiler("LDY"))
          .put((byte) 0xad, new AbsoluteDecompiler("LDA"))
          .put((byte) 0xae, new AbsoluteDecompiler("LDX"))
          .put((byte) 0xaf, new AbsoluteDecompiler("LAX", true))
          .put((byte) 0xb0, new BranchDecompiler("BCS"))
          .put((byte) 0xb1, new IndirectYDecompiler("LDA"))
          .put((byte) 0xb3, new IndirectYDecompiler("LAX", true))
          .put((byte) 0xb4, new ZeropageXDecompiler("LDY"))
          .put((byte) 0xb5, new ZeropageXDecompiler("LDA"))
          .put((byte) 0xb6, new ZeropageYDecompiler("LDX"))
          .put((byte) 0xb7, new ZeropageYDecompiler("LAX", true))
          .put((byte) 0xb8, new ImpliedDecompiler("CLV"))
          .put((byte) 0xb9, new AbsoluteYDecompiler("LDA"))
          .put((byte) 0xba, new ImpliedDecompiler("TSX"))
          .put((byte) 0xbc, new AbsoluteXDecompiler("LDY"))
          .put((byte) 0xbd, new AbsoluteXDecompiler("LDA"))
          .put((byte) 0xbe, new AbsoluteYDecompiler("LDX"))
          .put((byte) 0xbf, new AbsoluteYDecompiler("LAX", true))
          .put((byte) 0xc0, new ImmediateDecompiler("CPY"))
          .put((byte) 0xc1, new IndirectXDecompiler("CMP"))
          .put((byte) 0xc2, new ImmediateDecompiler("NOP", true))
          .put((byte) 0xc3, new IndirectXDecompiler("DCP", true))
          .put((byte) 0xc4, new ZeropageDecompiler("CPY"))
          .put((byte) 0xc5, new ZeropageDecompiler("CMP"))
          .put((byte) 0xc6, new ZeropageDecompiler("DEC"))
          .put((byte) 0xc7, new ZeropageDecompiler("DCP", true))
          .put((byte) 0xc8, new ImpliedDecompiler("INY"))
          .put((byte) 0xc9, new ImmediateDecompiler("CMP"))
          .put((byte) 0xca, new ImpliedDecompiler("DEX"))
          .put((byte) 0xcb, new ImmediateDecompiler("AXS", true))
          .put((byte) 0xcc, new AbsoluteDecompiler("CPY"))
          .put((byte) 0xcd, new AbsoluteDecompiler("CMP"))
          .put((byte) 0xce, new AbsoluteDecompiler("DEC"))
          .put((byte) 0xcf, new AbsoluteDecompiler("DCP", true))
          .put((byte) 0xd0, new BranchDecompiler("BNE"))
          .put((byte) 0xd1, new IndirectYDecompiler("CMP"))
          .put((byte) 0xd3, new IndirectYDecompiler("DCP", true))
          .put((byte) 0xd4, new ZeropageXDecompiler("NOP", true))
          .put((byte) 0xd5, new ZeropageXDecompiler("CMP"))
          .put((byte) 0xd6, new ZeropageXDecompiler("DEC"))
          .put((byte) 0xd7, new ZeropageXDecompiler("DCP", true))
          .put((byte) 0xd8, new ImpliedDecompiler("CLD"))
          .put((byte) 0xd9, new AbsoluteYDecompiler("CMP"))
          .put((byte) 0xda, new ImpliedDecompiler("NOP", true))
          .put((byte) 0xdb, new AbsoluteYDecompiler("DCP", true))
          .put((byte) 0xdc, new AbsoluteXDecompiler("NOP", true))
          .put((byte) 0xdd, new AbsoluteXDecompiler("CMP"))
          .put((byte) 0xde, new AbsoluteXDecompiler("DEC"))
          .put((byte) 0xdf, new AbsoluteXDecompiler("DCP", true))
          .put((byte) 0xe0, new ImmediateDecompiler("CPX"))
          .put((byte) 0xe1, new IndirectXDecompiler("SBC"))
          .put((byte) 0xe2, new ImmediateDecompiler("NOP", true))
          .put((byte) 0xe3, new IndirectXDecompiler("ISB", true))
          .put((byte) 0xe4, new ZeropageDecompiler("CPX"))
          .put((byte) 0xe5, new ZeropageDecompiler("SBC"))
          .put((byte) 0xe6, new ZeropageDecompiler("INC"))
          .put((byte) 0xe7, new ZeropageDecompiler("ISB", true))
          .put((byte) 0xe8, new ImpliedDecompiler("INX"))
          .put((byte) 0xe9, new ImmediateDecompiler("SBC"))
          .put((byte) 0xea, new ImpliedDecompiler("NOP"))
          .put((byte) 0xeb, new ImmediateDecompiler("SBC", true))
          .put((byte) 0xec, new AbsoluteDecompiler("CPX"))
          .put((byte) 0xed, new AbsoluteDecompiler("SBC"))
          .put((byte) 0xee, new AbsoluteDecompiler("INC"))
          .put((byte) 0xef, new AbsoluteDecompiler("ISB", true))
          .put((byte) 0xf0, new BranchDecompiler("BEQ"))
          .put((byte) 0xf1, new IndirectYDecompiler("SBC"))
          .put((byte) 0xf3, new IndirectYDecompiler("ISB", true))
          .put((byte) 0xf4, new ZeropageXDecompiler("NOP", true))
          .put((byte) 0xf5, new ZeropageXDecompiler("SBC"))
          .put((byte) 0xf6, new ZeropageXDecompiler("INC"))
          .put((byte) 0xf7, new ZeropageXDecompiler("ISB", true))
          .put((byte) 0xf8, new ImpliedDecompiler("SED"))
          .put((byte) 0xf9, new AbsoluteYDecompiler("SBC"))
          .put((byte) 0xfa, new ImpliedDecompiler("NOP", true))
          .put((byte) 0xfb, new AbsoluteYDecompiler("ISB", true))
          .put((byte) 0xfc, new AbsoluteXDecompiler("NOP", true))
          .put((byte) 0xfd, new AbsoluteXDecompiler("SBC"))
          .put((byte) 0xfe, new AbsoluteXDecompiler("INC"))
          .put((byte) 0xff, new AbsoluteXDecompiler("ISB", true))
          .build();

  private final NesCpuMemoryMap memory;
  private final OutputStream output;

  public NesCpuLogger(NesCpuMemoryMap memory, OutputStream output) {
    this.memory = memory;
    this.output = output;
  }

  public void log(byte opcode, NesCpu cpu) {
//    try {
//      output.write(format(opcode, cpu).getBytes());
//    } catch (IOException exc) {
//      throw new RuntimeException(exc);
//    }
  }

  private String format(byte opcode, NesCpu cpu) {
    Decompiler decompiler = DECOMPILERS.getOrDefault(opcode, new TodoDecompiler());
    return String.format(
        "%02X%02X  %-40s  A:%02X X:%02X Y:%02X P:%02X SP:%02X PPU:  0,  0 CYC:%d\n",
        cpu.state.adh,
        cpu.state.adl,
        decompiler.decompile(opcode, cpu.state.pc, cpu, memory),
        cpu.state.a,
        cpu.state.x,
        cpu.state.y,
        cpu.state.p,
        cpu.state.sp,
        cpu.counter);
  }

  private static final class TodoDecompiler implements Decompiler {

    @Override
    public String decompile(byte opcode, short pc, NesCpu cpu, NesCpuMemoryMap memory) {
      return String.format("%02X TODO", opcode);
    }
  }
}
